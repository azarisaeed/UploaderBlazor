@using System.Web
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Security.Claims
@inject ILogger<Index> Logger
@inject IWebHostEnvironment Environment
@page "/"


<MudText Typo="Typo.h4">Upload</MudText>
<MudFileUpload T="IReadOnlyList<IBrowserFile>" OnFilesChanged="@LoadFiles" multiple>
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary" StartIcon="@Icons.Material.Filled.CloudUpload">
            Upload Files
        </MudButton>
    </ActivatorContent>
    <SelectedTemplate>
        @if (context != null)
        {
            <MudText Typo="Typo.h4">Selected Files</MudText>

            <MudDataGrid Class="table" title="Selected Files" Items="context" Filterable="false" SortMode="@SortMode.None" Groupable="false" Striped="true">
                <Columns>
                    <MudBlazor.PropertyColumn Title="Name" Property="file => file.Name" />
                    <MudBlazor.PropertyColumn Title="Last modified" Property="file => file.LastModified" />
                    <MudBlazor.PropertyColumn Title="Size (MB)" Property="file => ((file.Size / 1024f) / 1024f)" />
                    <MudBlazor.PropertyColumn Title="Content type" Property="file =>file.ContentType" />

                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudText>No Files</MudText>
        }
    </SelectedTemplate>
</MudFileUpload>
@Exeption
@if (isLoading)
{
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
}
else
{
    <MudText Typo="Typo.h4">Uploaded Files</MudText>

    <MudDataGrid Class="table" title="Uploaded Files" Items="loadedFiles" Filterable="false" SortMode="@SortMode.None" Groupable="false" Striped="true">
        <Columns>
            <MudBlazor.PropertyColumn Title="Name" Property="file => file.Name" />
            <MudBlazor.PropertyColumn Title="Last modified" Property="file => file.LastModified" />
            <MudBlazor.PropertyColumn Title="Size (MB)" Property="file => ((file.Size / 1024f) / 1024f)" />
            <MudBlazor.PropertyColumn Title="Content type" Property="file =>file.ContentType" />

        </Columns>
    </MudDataGrid>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private string Email;
    private string Exeption = "";
    private bool isLoading;
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        var authstate = await authenticationStateTask;
        Email = authstate?.User.FindFirst(ClaimTypes.Email)?.Value ?? "Unknown";

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                loadedFiles.Add(file);
                var basePath = Path.Combine(Environment.ContentRootPath,
                         "wwwroot/uploads", Email);
                var trustedFileNameForFileStorage = file.Name;


                bool exists = System.IO.Directory.Exists(basePath);

                if (!exists)
                    System.IO.Directory.CreateDirectory(basePath);



                var path = Path.Combine(basePath,
                        trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(file.Size).CopyToAsync(fs);
            }
            catch (Exception ex)
            {

                Exeption = ex.Message + "::" + ex.StackTrace;
            }
        }

        isLoading = false;
    }
}