@using System.Web
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Security.Claims

@inject ILogger<Index> Logger
@inject IWebHostEnvironment Environment
@page "/Uploaded"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager



<PageTitle>Uploaded</PageTitle>


<h1>UploudedFiles</h1>

@Exeption
@if (Files == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Directory</th>
                <th>Create Date</th>
                <th>Size</th>
                <th>Download</th>
                @if (IsAdmin)
                {
                    <th>Remove</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var fl in Files)
            {
                <tr>
                    <td>@fl.Name</td>
                    <td>@fl.Directory.Name</td>
                    <td>@fl.CreationTime</td>
                    <td>@((fl.Length / 1024f) / 1024f) Mb</td>
                    <td> <button @onclick='async ()=>await Download(fl.Directory.Name,fl.Name)'>Download</button> </td>
                    @if (IsAdmin)
                    {
                        <td> <button @onclick='async ()=>await Remove(fl.Directory.FullName,fl.Name)'>Remove</button> </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<FileInfo> Files { get; set; } = new List<FileInfo>();
    private bool IsAdmin { get; set; } = false;
    private string Exeption { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        var authstate = await authenticationStateTask;
        IsAdmin = !((authstate?.User.FindFirst(ClaimTypes.Role)?.Value ?? "User") == "User");
        try
        {
            await FillReport();

        }
        catch (Exception ex)
        {

            Exeption = ex.Message + "::" + ex.StackTrace;
        }


    }

    protected async Task FillReport()
    {

        if (IsAdmin)
        {
            var basePath = Path.Combine(Environment.ContentRootPath,
                    "wwwroot/uploads");
            DirectoryInfo d = new DirectoryInfo(basePath);
            var Directories = d.GetDirectories().ToList();
            foreach (var item in Directories)
            {
                Files.AddRange(item.GetFiles().ToList());
            }
        }
        else
        {

            var basePathUnknown = Path.Combine(Environment.ContentRootPath,
                      "wwwroot/uploads", "Unknown");
            bool exists = System.IO.Directory.Exists(basePathUnknown);

            if (!exists)
                System.IO.Directory.CreateDirectory(basePathUnknown);

            DirectoryInfo dUnknown = new DirectoryInfo(basePathUnknown);
            Files.AddRange(dUnknown.GetFiles().ToList());
        }
        Files = Files.OrderByDescending(i => i.CreationTime).ToList(); 
    }
    protected async Task Download(string path, string Filename)
    {
        await RedirectTo("uploads/"+path + "/" + Filename);
    }
    public  async Task<string> RedirectTo(string path)
    {
        return await JS.InvokeAsync<string>(
            "clientJsfunctions.RedirectTo", path);
    }
    protected async Task Remove(string path, string Filename)
    {
        var pathFull = Path.Combine(path, Filename);
        File.Delete(pathFull);
        Files = new List<FileInfo>();
        await FillReport();
        StateHasChanged();
    }

}
