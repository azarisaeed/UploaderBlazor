@using System.Web
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@using System.Security.Claims

@inject ILogger<Index> Logger
@inject IWebHostEnvironment Environment
@page "/Uploaded"
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
<PageTitle>Uploaded</PageTitle>
@Exeption
@if (Files == null)
{
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />
}
else
{
    <MudDataGrid Class="table" Items="Files" Filterable="false" SortMode="@SortMode.None" Groupable="false" Striped="true" >
        <Columns>
            <MudBlazor.PropertyColumn Title="Name" Property="internalphone => internalphone.Name" />
            <MudBlazor.PropertyColumn Title="Directory" Property="internalphone => internalphone.Directory.Name" />
            <MudBlazor.PropertyColumn Title="Create Date" Property="internalphone => internalphone.CreationTime" />
            <MudBlazor.PropertyColumn Title="Size in MB" Property="internalphone => ((internalphone.Length / 1024f) / 1024f).ToString()" />
            <MudBlazor.TemplateColumn Title="Preview" >
                <CellTemplate>
                    <MudStack Row>
                        <MudImage src="@($"uploads/{context.Item.Directory.Name }/{context.Item.Name}")" alt="Can not Load image" width="100" />
                    </MudStack>
                </CellTemplate>
            </MudBlazor.TemplateColumn>
            <MudBlazor.TemplateColumn Title="Download" >
                <CellTemplate>
                    <MudStack Row>
                        <MudButton Size="@Size.Small" @onclick='async ()=>await Download(context.Item.Directory.Name,context.Item.Name)' Variant="@Variant.Filled" Color="@Color.Primary">Download</MudButton>
                    </MudStack>
                </CellTemplate>
            </MudBlazor.TemplateColumn>
            @if (IsAdmin)
            {
                <MudBlazor.TemplateColumn Title="Remove" >
                    <CellTemplate>
                        <MudStack Row>
                            <MudButton Size="@Size.Small" @onclick='async ()=>await Remove(context.Item.Directory.FullName,context.Item.Name)' Variant="@Variant.Filled" Color="@Color.Primary">Remove</MudButton>
                        </MudStack>
                    </CellTemplate>
                </MudBlazor.TemplateColumn>
            }
        </Columns>
    </MudDataGrid>
}

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<FileInfo> Files { get; set; } = new List<FileInfo>();
    private bool IsAdmin { get; set; } = false;
    private string Exeption { get; set; } = "";
    protected override async Task OnInitializedAsync()
    {
        var authstate = await authenticationStateTask;
        IsAdmin = !((authstate?.User.FindFirst(ClaimTypes.Role)?.Value ?? "User") == "User");
        try
        {
            await FillReport();

        }
        catch (Exception ex)
        {

            Exeption = ex.Message + "::" + ex.StackTrace;
        }


    }

    protected async Task FillReport()
    {

        if (IsAdmin)
        {
            var basePath = Path.Combine(Environment.ContentRootPath,
                    "wwwroot/uploads");
            DirectoryInfo d = new DirectoryInfo(basePath);
            var Directories = d.GetDirectories().ToList();
            foreach (var item in Directories)
            {
                Files.AddRange(item.GetFiles().ToList());
            }
        }
        else
        {

            var basePathUnknown = Path.Combine(Environment.ContentRootPath,
                      "wwwroot/uploads", "Unknown");
            bool exists = System.IO.Directory.Exists(basePathUnknown);

            if (!exists)
                System.IO.Directory.CreateDirectory(basePathUnknown);

            DirectoryInfo dUnknown = new DirectoryInfo(basePathUnknown);
            Files.AddRange(dUnknown.GetFiles().ToList());
        }
        Files = Files.OrderByDescending(i => i.CreationTime).ToList();
    }
    protected async Task Download(string path, string Filename)
    {
        await RedirectTo("uploads/" + path + "/" + Filename);
    }
    public async Task<string> RedirectTo(string path)
    {
        return await JS.InvokeAsync<string>(
            "clientJsfunctions.RedirectTo", path);
    }
    protected async Task Remove(string path, string Filename)
    {
        var pathFull = Path.Combine(path, Filename);
        File.Delete(pathFull);
        Files = new List<FileInfo>();
        await FillReport();
        StateHasChanged();
    }

}
