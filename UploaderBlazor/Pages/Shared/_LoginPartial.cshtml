@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider

<ul class="navbar-nav">
    @{
        var IsAuthenticated = false;
        var Name = "";
        try
        {
            var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
            var user = authState.User;
            if (user.Identity is not null && user.Identity.IsAuthenticated)
            {
                IsAuthenticated = true;
                Name = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
                var Email = user.FindFirst(c => c.Type == ClaimTypes.Email)?.Value;


            }

        }
        catch (Exception ex)
        {
        }
        @if (IsAuthenticated)
        {
            <li class="nav-item">
                <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello @Name!</a>
            </li>
            <li class="nav-item">
                <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Page("/Index", new { area = "" })">
                    <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
                </form>
            </li>
        }
        else
        {
            <li class="nav-item">
                <a class="nav-link text-dark" id="register" asp-area="Identity" asp-page="/Account/Register">Register</a>
            </li>
            <li class="nav-item">
                <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
            </li>
        }
    }
</ul>
